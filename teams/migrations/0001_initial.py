# Generated by Django 3.1.7 on 2021-04-29 19:43

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('hunts', '0001_initial'),
        ('flatpages', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Guess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guess_time', models.DateTimeField()),
                ('guess_text', models.CharField(max_length=100)),
                ('response_text', models.CharField(blank=True, help_text='Response to the given answer. Empty string indicates human response needed', max_length=400)),
                ('modified_date', models.DateTimeField(help_text='Last date/time of response modification')),
                ('puzzle', models.ForeignKey(help_text='The puzzle that this guess is in response to', on_delete=django.db.models.deletion.CASCADE, to='hunts.puzzle')),
            ],
            options={
                'verbose_name_plural': 'Guesses',
            },
        ),
        migrations.CreateModel(
            name='PuzzleSolve',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guess', models.ForeignKey(blank=True, help_text='The guess object that the team submitted to solve the puzzle', on_delete=django.db.models.deletion.CASCADE, to='teams.guess')),
                ('puzzle', models.ForeignKey(help_text='The puzzle that this is a solve for', on_delete=django.db.models.deletion.CASCADE, to='hunts.puzzle')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(help_text='The team name as it will be shown to hunt participants', max_length=200)),
                ('location', models.CharField(blank=True, help_text='The country the members of the team are from', max_length=80, null=True)),
                ('join_code', models.CharField(help_text='The 5 character random alphanumeric password needed for a user to join a team', max_length=5)),
                ('playtester', models.BooleanField(default=False, help_text='A boolean to indicate if the team is a playtest team and will get early access')),
                ('playtest_start_date', models.DateTimeField(blank=True, help_text='The date/time at which a hunt will become to the playtesters', null=True)),
                ('playtest_end_date', models.DateTimeField(blank=True, help_text='The date/time at which a hunt will no longer be available to playtesters', null=True)),
                ('num_waiting_messages', models.IntegerField(default=0, help_text='The number of unseen messages a team has waiting')),
                ('num_unlock_points', models.IntegerField(default=0, help_text='The number of points the team has earned')),
            ],
        ),
        migrations.CreateModel(
            name='FlatPageProxyObject',
            fields=[
            ],
            options={
                'verbose_name': 'info page',
                'verbose_name_plural': 'info pages',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('flatpages.flatpage',),
        ),
        migrations.CreateModel(
            name='UserProxyObject',
            fields=[
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-pk'],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TeamPuzzleLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(help_text='The time this puzzle was unlocked for this team')),
                ('puzzle', models.ForeignKey(help_text='The puzzle that this is an unlock for', on_delete=django.db.models.deletion.CASCADE, to='hunts.puzzle')),
                ('team', models.ForeignKey(help_text='The team that this unlocked puzzle is for', on_delete=django.db.models.deletion.CASCADE, to='teams.team')),
            ],
            options={
                'unique_together': {('puzzle', 'team')},
            },
        ),
        migrations.CreateModel(
            name='TeamEurekaLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(help_text='The time this eureka was unlocked for this team')),
                ('eureka', models.ForeignKey(help_text='The eureka unlocked', on_delete=django.db.models.deletion.CASCADE, to='hunts.eureka')),
                ('team', models.ForeignKey(help_text='The team that this unlocked puzzle is for', on_delete=django.db.models.deletion.CASCADE, to='teams.team')),
            ],
            options={
                'unique_together': {('eureka', 'team')},
            },
        ),
        migrations.AddField(
            model_name='team',
            name='eurekas',
            field=models.ManyToManyField(blank=True, help_text='The eurekas the team has unlocked', related_name='eurekas_for', through='teams.TeamEurekaLink', to='hunts.Eureka'),
        ),
        migrations.AddField(
            model_name='team',
            name='hunt',
            field=models.ForeignKey(help_text='The hunt that the team is a part of', on_delete=django.db.models.deletion.CASCADE, to='hunts.hunt'),
        ),
        migrations.AddField(
            model_name='team',
            name='solved',
            field=models.ManyToManyField(blank=True, help_text='The puzzles the team has solved', related_name='solved_for', through='teams.PuzzleSolve', to='hunts.Puzzle'),
        ),
        migrations.AddField(
            model_name='team',
            name='unlockables',
            field=models.ManyToManyField(blank=True, help_text='The unlockables the team has earned', to='hunts.Unlockable'),
        ),
        migrations.AddField(
            model_name='team',
            name='unlocked',
            field=models.ManyToManyField(blank=True, help_text='The puzzles the team has unlocked', related_name='unlocked_for', through='teams.TeamPuzzleLink', to='hunts.Puzzle'),
        ),
        migrations.AddField(
            model_name='puzzlesolve',
            name='team',
            field=models.ForeignKey(help_text='The team that this solve is from', on_delete=django.db.models.deletion.CASCADE, to='teams.team'),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.CharField(blank=True, help_text='Comments or other notes about the person', max_length=400)),
                ('teams', models.ManyToManyField(blank=True, help_text='Teams that the person is on', to='teams.Team')),
                ('user', models.OneToOneField(help_text='The corresponding user to this person', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='guess',
            name='team',
            field=models.ForeignKey(help_text='The team that made the guess', on_delete=django.db.models.deletion.CASCADE, to='teams.team'),
        ),
        migrations.AddField(
            model_name='guess',
            name='user',
            field=models.ForeignKey(help_text='The user that made the guess', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='puzzlesolve',
            unique_together={('puzzle', 'team')},
        ),
    ]
