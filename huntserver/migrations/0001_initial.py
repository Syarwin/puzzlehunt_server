# Generated by Django 3.1.7 on 2021-04-27 14:51

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import huntserver.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('flatpages', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ep_name', models.CharField(help_text='The name of the episode as the public will see it', max_length=200)),
                ('ep_number', models.IntegerField(help_text='A number used internally for hunt sorting, must be unique', unique=True)),
                ('start_date', models.DateTimeField(help_text='The date/time at which a hunt will become visible to registered users')),
            ],
        ),
        migrations.CreateModel(
            name='Eureka',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regex', models.CharField(help_text="The python-style regex that will be checked against the user's response", max_length=400)),
                ('answer', models.CharField(help_text='The text to use in the guess response if the regex matched', max_length=400)),
                ('feedback', models.CharField(blank=True, help_text='The feedback message sent when this eureka is found - if blank, use the default feedback of the hunt', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='EurekaUnlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(help_text='The time this eureka was unlocked for this team')),
            ],
        ),
        migrations.CreateModel(
            name='Guess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guess_time', models.DateTimeField()),
                ('guess_text', models.CharField(max_length=100)),
                ('response_text', models.CharField(blank=True, help_text='Response to the given answer. Empty string indicates human response needed', max_length=400)),
                ('modified_date', models.DateTimeField(help_text='Last date/time of response modification')),
            ],
            options={
                'verbose_name_plural': 'Guesses',
            },
        ),
        migrations.CreateModel(
            name='Hint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(help_text='The text to display', max_length=400)),
                ('time', models.DurationField(help_text='Time after anyone on the team first loads the puzzle', validators=[django.core.validators.MinValueValidator(datetime.timedelta(0))], verbose_name='Delay')),
                ('short_time', models.DurationField(help_text='Time after all the associated Eurekas were found', validators=[django.core.validators.MinValueValidator(datetime.timedelta(0))], verbose_name='Shorter Delay')),
            ],
        ),
        migrations.CreateModel(
            name='Hunt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hunt_name', models.CharField(help_text='The name of the hunt as the public will see it', max_length=200)),
                ('hunt_number', models.IntegerField(help_text='A number used internally for hunt sorting, must be unique', unique=True)),
                ('team_size', models.IntegerField()),
                ('start_date', models.DateTimeField(help_text='The date/time at which a hunt will become visible to registered users')),
                ('end_date', models.DateTimeField(help_text='The date/time at which a hunt will be archived and available to the public')),
                ('display_start_date', models.DateTimeField(help_text='The start date/time displayed to users')),
                ('display_end_date', models.DateTimeField(help_text='The end date/time displayed to users')),
                ('resource_file', models.FileField(blank=True, help_text='Hunt resources, MUST BE A ZIP FILE.', storage=huntserver.models.PuzzleOverwriteStorage(), upload_to=huntserver.models.get_hunt_file_path)),
                ('is_current_hunt', models.BooleanField(default=False)),
                ('extra_data', models.CharField(blank=True, help_text='A misc. field for any extra data to be stored with the hunt.', max_length=200)),
                ('template', models.TextField(default='', help_text='The template string to be rendered to HTML on the hunt page')),
                ('points_per_minute', models.IntegerField(default=0, help_text='The number of points granted per minute during the hunt')),
                ('eureka_feedback', models.CharField(blank=True, help_text='The default feedback message sent when an eureka is found', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='HuntAssetFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(storage=huntserver.models.OverwriteStorage(), upload_to='hunt/assets/')),
            ],
        ),
        migrations.CreateModel(
            name='Puzzle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('puzzle_name', models.CharField(help_text='The name of the puzzle as it will be seen by hunt participants', max_length=200)),
                ('puzzle_number', models.IntegerField(help_text='The number of the puzzle within the episode, for sorting purposes')),
                ('puzzle_id', models.CharField(help_text='A 3-12 character hex string that uniquely identifies the puzzle', max_length=12, unique=True)),
                ('answer', models.CharField(help_text='The answer to the puzzle, not case sensitive', max_length=100)),
                ('is_meta', models.BooleanField(default=False, help_text='Is this puzzle a meta-puzzle?', verbose_name='Is a metapuzzle')),
                ('puzzle_page_type', models.CharField(choices=[('PDF', 'Puzzle page displays a PDF'), ('LNK', 'Puzzle page links a webpage'), ('WEB', 'Puzzle page displays a webpage')], default='WEB', help_text='The type of webpage for this puzzle.', max_length=3)),
                ('doesnt_count', models.BooleanField(default=False, help_text='Should this puzzle not count towards scoring?')),
                ('puzzle_file', models.FileField(blank=True, help_text='Puzzle file. MUST BE A PDF', storage=huntserver.models.PuzzleOverwriteStorage(), upload_to=huntserver.models.get_puzzle_file_path)),
                ('resource_file', models.FileField(blank=True, help_text='Puzzle resources, MUST BE A ZIP FILE.', storage=huntserver.models.PuzzleOverwriteStorage(), upload_to=huntserver.models.get_puzzle_file_path)),
                ('template', models.TextField(default='', help_text='The template string to be rendered to HTML on the puzzle page')),
                ('solution_is_webpage', models.BooleanField(default=False, help_text='Is this solution an html webpage?')),
                ('solution_file', models.FileField(blank=True, help_text='Puzzle solution. MUST BE A PDF.', storage=huntserver.models.PuzzleOverwriteStorage(), upload_to=huntserver.models.get_solution_file_path)),
                ('solution_resource_file', models.FileField(blank=True, help_text='Puzzle solution resources, MUST BE A ZIP FILE.', storage=huntserver.models.PuzzleOverwriteStorage(), upload_to=huntserver.models.get_solution_file_path)),
                ('extra_data', models.CharField(blank=True, help_text='A misc. field for any extra data to be stored with the puzzle.', max_length=200)),
                ('unlock_type', models.CharField(choices=[('SOL', 'Solves Based Unlock'), ('POT', 'Points Based Unlock'), ('ETH', 'Either (OR) Unlocking Method'), ('BTH', 'Both (AND) Unlocking Methods')], default='SOL', help_text='The type of puzzle unlocking scheme', max_length=3)),
                ('num_required_to_unlock', models.IntegerField(default=1, help_text='Number of prerequisite puzzles that need to be solved to unlock this puzzle')),
                ('points_cost', models.IntegerField(default=0, help_text='The number of points needed to unlock this puzzle.')),
                ('points_value', models.IntegerField(default=0, help_text='The number of points this puzzle grants upon solving.')),
                ('episode', models.ForeignKey(help_text='The episode that this puzzle is a part of', on_delete=django.db.models.deletion.CASCADE, to='huntserver.episode')),
                ('unlocks', models.ManyToManyField(blank=True, help_text='Puzzles that this puzzle is a possible prerequisite for', to='huntserver.Puzzle')),
            ],
            options={
                'ordering': ['-episode', 'puzzle_number'],
            },
        ),
        migrations.CreateModel(
            name='PuzzleSolve',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guess', models.ForeignKey(blank=True, help_text='The guess object that the team submitted to solve the puzzle', on_delete=django.db.models.deletion.CASCADE, to='huntserver.guess')),
                ('puzzle', models.ForeignKey(help_text='The puzzle that this is a solve for', on_delete=django.db.models.deletion.CASCADE, to='huntserver.puzzle')),
            ],
        ),
        migrations.CreateModel(
            name='PuzzleUnlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(help_text='The time this puzzle was unlocked for this team')),
                ('puzzle', models.ForeignKey(help_text='The puzzle that this is an unlock for', on_delete=django.db.models.deletion.CASCADE, to='huntserver.puzzle')),
            ],
        ),
        migrations.CreateModel(
            name='FlatPageProxyObject',
            fields=[
            ],
            options={
                'verbose_name': 'info page',
                'verbose_name_plural': 'info pages',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('flatpages.flatpage',),
        ),
        migrations.CreateModel(
            name='UserProxyObject',
            fields=[
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-pk'],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Unlockable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('IMG', 'Image'), ('PDF', 'PDF'), ('TXT', 'Text'), ('WEB', 'Link')], default='TXT', help_text="The type of object that is to be unlocked, can be 'IMG', 'PDF', 'TXT', or 'WEB'", max_length=3)),
                ('content', models.CharField(help_text='The link to the content, files must be externally hosted.', max_length=500)),
                ('puzzle', models.ForeignKey(help_text='The puzzle that needs to be solved to unlock this object', on_delete=django.db.models.deletion.CASCADE, to='huntserver.puzzle')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(help_text='The team name as it will be shown to hunt participants', max_length=200)),
                ('location', models.CharField(blank=True, help_text='The country the members of the team are from', max_length=80, null=True)),
                ('join_code', models.CharField(help_text='The 5 character random alphanumeric password needed for a user to join a team', max_length=5)),
                ('playtester', models.BooleanField(default=False, help_text='A boolean to indicate if the team is a playtest team and will get early access')),
                ('playtest_start_date', models.DateTimeField(blank=True, help_text='The date/time at which a hunt will become to the playtesters', null=True)),
                ('playtest_end_date', models.DateTimeField(blank=True, help_text='The date/time at which a hunt will no longer be available to playtesters', null=True)),
                ('num_waiting_messages', models.IntegerField(default=0, help_text='The number of unseen messages a team has waiting')),
                ('num_unlock_points', models.IntegerField(default=0, help_text='The number of points the team has earned')),
                ('eurekas', models.ManyToManyField(blank=True, help_text='The eurekas the team has unlocked', related_name='eurekas_for', through='huntserver.EurekaUnlock', to='huntserver.Eureka')),
                ('hunt', models.ForeignKey(help_text='The hunt that the team is a part of', on_delete=django.db.models.deletion.CASCADE, to='huntserver.hunt')),
                ('solved', models.ManyToManyField(blank=True, help_text='The puzzles the team has solved', related_name='solved_for', through='huntserver.PuzzleSolve', to='huntserver.Puzzle')),
                ('unlockables', models.ManyToManyField(blank=True, help_text='The unlockables the team has earned', to='huntserver.Unlockable')),
                ('unlocked', models.ManyToManyField(blank=True, help_text='The puzzles the team has unlocked', related_name='unlocked_for', through='huntserver.PuzzleUnlock', to='huntserver.Puzzle')),
            ],
        ),
        migrations.AddField(
            model_name='puzzleunlock',
            name='team',
            field=models.ForeignKey(help_text='The team that this unlocked puzzle is for', on_delete=django.db.models.deletion.CASCADE, to='huntserver.team'),
        ),
        migrations.AddField(
            model_name='puzzlesolve',
            name='team',
            field=models.ForeignKey(help_text='The team that this solve is from', on_delete=django.db.models.deletion.CASCADE, to='huntserver.team'),
        ),
        migrations.CreateModel(
            name='Prepuzzle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('puzzle_name', models.CharField(help_text='The name of the puzzle as it will be seen by hunt participants', max_length=200)),
                ('released', models.BooleanField(default=False)),
                ('answer', models.CharField(help_text='The answer to the puzzle, not case sensitive', max_length=100)),
                ('template', models.TextField(default='{% extends "prepuzzle.html" %}\r\n{% load prepuzzle_tags %}\r\n\r\n{% block content %}\r\n{% endblock content %}', help_text='The template string to be rendered to HTML on the hunt page')),
                ('resource_file', models.FileField(blank=True, help_text='Prepuzzle resources, MUST BE A ZIP FILE.', storage=huntserver.models.PuzzleOverwriteStorage(), upload_to=huntserver.models.get_prepuzzle_file_path)),
                ('response_string', models.TextField(default='', help_text='Data returned to the webpage for use upon solving.')),
                ('hunt', models.OneToOneField(blank=True, help_text='The hunt that this puzzle is a part of, leave blank for no associated hunt.', null=True, on_delete=django.db.models.deletion.CASCADE, to='huntserver.hunt')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.CharField(blank=True, help_text='Comments or other notes about the person', max_length=400)),
                ('teams', models.ManyToManyField(blank=True, help_text='Teams that the person is on', to='huntserver.Team')),
                ('user', models.OneToOneField(help_text='The corresponding user to this person', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='hunt',
            index=models.Index(fields=['hunt_number'], name='huntserver__hunt_nu_0fecf6_idx'),
        ),
        migrations.AddField(
            model_name='hint',
            name='eurekas',
            field=models.ManyToManyField(blank=True, help_text='Eurekas that are a prerequisite for shorter time', to='huntserver.Eureka', verbose_name='Eureka conditions'),
        ),
        migrations.AddField(
            model_name='hint',
            name='puzzle',
            field=models.ForeignKey(help_text='The puzzle that this automated response is related to', on_delete=django.db.models.deletion.CASCADE, to='huntserver.puzzle'),
        ),
        migrations.AddField(
            model_name='guess',
            name='puzzle',
            field=models.ForeignKey(help_text='The puzzle that this guess is in response to', on_delete=django.db.models.deletion.CASCADE, to='huntserver.puzzle'),
        ),
        migrations.AddField(
            model_name='guess',
            name='team',
            field=models.ForeignKey(help_text='The team that made the guess', on_delete=django.db.models.deletion.CASCADE, to='huntserver.team'),
        ),
        migrations.AddField(
            model_name='guess',
            name='user',
            field=models.ForeignKey(help_text='The user that made the guess', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eurekaunlock',
            name='eureka',
            field=models.ForeignKey(help_text='The eureka unlocked', on_delete=django.db.models.deletion.CASCADE, to='huntserver.eureka'),
        ),
        migrations.AddField(
            model_name='eurekaunlock',
            name='team',
            field=models.ForeignKey(help_text='The team that this unlocked puzzle is for', on_delete=django.db.models.deletion.CASCADE, to='huntserver.team'),
        ),
        migrations.AddField(
            model_name='eureka',
            name='puzzle',
            field=models.ForeignKey(help_text='The puzzle that this automated response is related to', on_delete=django.db.models.deletion.CASCADE, to='huntserver.puzzle'),
        ),
        migrations.AddField(
            model_name='episode',
            name='hunt',
            field=models.ForeignKey(help_text='The hunt that this episode is a part of', on_delete=django.db.models.deletion.CASCADE, to='huntserver.hunt'),
        ),
        migrations.AlterUniqueTogether(
            name='puzzleunlock',
            unique_together={('puzzle', 'team')},
        ),
        migrations.AlterUniqueTogether(
            name='puzzlesolve',
            unique_together={('puzzle', 'team')},
        ),
        migrations.AddIndex(
            model_name='puzzle',
            index=models.Index(fields=['puzzle_id'], name='huntserver__puzzle__bc16c3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eurekaunlock',
            unique_together={('eureka', 'team')},
        ),
        migrations.AddIndex(
            model_name='episode',
            index=models.Index(fields=['ep_number'], name='huntserver__ep_numb_9ebd7d_idx'),
        ),
    ]
